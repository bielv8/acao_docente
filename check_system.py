#!/usr/bin/env python3
"""
Script para verificar o funcionamento completo do sistema SENAI
Usado para diagnosticar problemas no Railway
"""

import os
import sys
import logging
from datetime import datetime

def check_environment():
    """Verificar vari√°veis de ambiente necess√°rias"""
    print("üîç Verificando vari√°veis de ambiente...")
    
    required_vars = ['DATABASE_URL']
    optional_vars = ['PORT', 'SESSION_SECRET']
    
    for var in required_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: {'*' * min(len(value), 10)}...")
        else:
            print(f"‚ùå {var}: N√ÉO DEFINIDA")
            return False
    
    for var in optional_vars:
        value = os.environ.get(var)
        if value:
            print(f"‚úÖ {var}: {'*' * min(len(value), 10)}...")
        else:
            print(f"‚ö†Ô∏è  {var}: usando valor padr√£o")
    
    return True

def check_database():
    """Verificar conex√£o com o banco de dados"""
    print("\nüìä Verificando conex√£o com banco de dados...")
    
    try:
        # Import do app de produ√ß√£o
        from production_app import app, db
        
        with app.app_context():
            # Testar conex√£o
            connection = db.engine.connect()
            connection.close()
            print("‚úÖ Conex√£o com PostgreSQL: OK")
            
            # Verificar tabelas
            inspector = db.inspect(db.engine)
            tables = inspector.get_table_names()
            print(f"‚úÖ Tabelas encontradas: {len(tables)}")
            
            # Verificar tabelas principais
            expected_tables = ['user', 'teacher', 'course', 'evaluation', 'evaluator']
            for table in expected_tables:
                if table in tables:
                    print(f"  ‚úÖ {table}")
                else:
                    print(f"  ‚ùå {table} - FALTANDO")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return False

def check_app_startup():
    """Verificar se a aplica√ß√£o inicia corretamente"""
    print("\nüöÄ Verificando inicializa√ß√£o da aplica√ß√£o...")
    
    try:
        from production_app import app
        
        with app.app_context():
            print("‚úÖ Aplica√ß√£o Flask: OK")
            print(f"‚úÖ Modo debug: {app.debug}")
            print(f"‚úÖ Configura√ß√µes carregadas: {len(app.config)} itens")
            
            # Testar rota de health
            with app.test_client() as client:
                response = client.get('/health')
                if response.status_code == 200:
                    print("‚úÖ Health check: OK")
                else:
                    print(f"‚ùå Health check: {response.status_code}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå Erro na aplica√ß√£o: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 50)
    print("üîß DIAGN√ìSTICO DO SISTEMA SENAI")
    print("=" * 50)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Python: {sys.version}")
    print(f"Diret√≥rio: {os.getcwd()}")
    
    # Verifica√ß√µes
    checks = [
        check_environment,
        check_database,
        check_app_startup
    ]
    
    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            results.append(False)
    
    # Resumo
    print("\n" + "=" * 50)
    print("üìã RESUMO DOS TESTES")
    print("=" * 50)
    
    test_names = [
        "Vari√°veis de ambiente",
        "Conex√£o com banco",
        "Inicializa√ß√£o da app"
    ]
    
    all_passed = True
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{i+1}. {name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("Sistema est√° pronto para produ√ß√£o no Railway")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("Verifique os erros acima antes do deploy")
        return 1

if __name__ == '__main__':
    sys.exit(main())